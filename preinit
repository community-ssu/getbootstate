#!/bin/sh

# This file is part of getbootstate
#
# Copyright (C) 2007,2008 Nokia Corporation. All rights reserved.
#
# Contact: Peter De Schrijver <peter.de-schrijver@nokia.com>
#
# This software, including documentation, is protected by copyright controlled by Nokia Corporation. All rights are reserved.
# Copying, including reproducing, storing, adapting or translating, any or all of this material requires the prior written
# consent of Nokia Corporation. This material also contains confidential information which may not be disclosed to others
# without the prior written consent of Nokia.

# Maemo community has permission to modify and redistribute this script for open source projects
# See Quim Gil post on https://bugs.maemo.org/show_bug.cgi?id=12228#c9

# Modified by:
# Copyright (C) 2011 Pali Roh√°r <pali.rohar@gmail.com>

FS_MODULES="mbcache ext2 jbd ext3"
MODULE_PATH="/lib/modules/`uname -r`"

echo_g()
{
	echo "getbootstate: $1"
}

osso_info()
{
	/usr/bin/osso-product-info -q $1 2>/dev/null
}

init_system()
{
	mount -t proc none /proc
	mount -t sysfs none /sys
	mount -t tmpfs none -o size=512K /tmp

	mkdir /tmp/dev

	# The twl4030 can either be named twl4030-adc or twl4030-madc.
	# So we check for both.

	madc_minor=$(grep twl4030-adc /proc/misc | cut -d " " -f 2)

	if [ -z $madc_minor ] ; then
		madc_minor=$(grep twl4030-madc /proc/misc | cut -d " " -f 2)
	fi

	if [ -n $madc_minor ] ; then
		mknod /tmp/dev/twl4030-adc c 10 $madc_minor
	fi

	# set UART timeout to 10s
	echo 10 > /sys/devices/platform/serial8250.0/sleep_timeout

	# Change ownership to allow locking for pulseaudio
	chown pulse:pulse /sys/power/vdd2_lock
}

fini_system()
{
	if [ "$have_ptys" = "1" ] ; then
		umount /dev/pts
	fi
	umount /sys
	umount /tmp
	umount /proc 2> /dev/null
	if [ -e /proc/mounts ]; then
		rm -f /proc/mounts # remove stray mounts
	fi
}

boot()
{
	[ -z "$root_init" ] && root_init="sbin/init"

	if [ $root_mounted -ne 1 ]; then
		mount_new_root
		if [ $? -ne 0 ]; then
			return 1
		fi
		cd /mnt/new_root
		if [ ! -d mnt/rootfs ]; then
			mkdir -p mnt/rootfs
		fi
		fini_system
		pivot_root . mnt/rootfs
		CHROOT="/usr/sbin/chroot ."
	else
		if [ ! -x "$root_init" ]; then
			echo_g "$root_init not found on root device"
			return 1
		fi
		fini_system
	fi

	# let me see then, what thereat is and this mistery explore
	/sbin/fiasco-do-update

	exec $CHROOT $root_init $def_runlevel <dev/console 1>dev/console 2>&1
}

load_modules()
{
	for mod in $1; do
		if [ -f $MODULE_PATH/$mod.ko ]; then
			insmod $MODULE_PATH/$mod.ko
		fi
	done
}

load_early_modules()
{
	# load all modules specified in /etc/early_modules (ignore white space and all after char '#')
	[ -f /etc/early_modules ] && load_modules "`sed 's/\s*#.*//;s/^\s*//;/^$/d' /etc/early_modules`"
}

load_mmc_modules()
{
	load_modules "mmc_core mmc_block omap_hsmmc"
	sleep 2
	for p in /sys/block/mmcblk*/ /sys/block/mmcblk*/mmcblk*p*/; do
		n=`basename $p`
		rm -f /dev/$n
		mknod /dev/$n b `cat $p/dev | sed "s/:/ /g"`
	done
}

set_default_root_params()
{
	root_dev=""
	root_dev_name=""
	root_dev_set=0
	root_fstype=""
	root_fsoptions=""
	root_fsmodules="$FS_MODULES"
	root_os_name=""
	root_init="sbin/init"
	root_mounted=0
	default_root=$(cal-tool --get-root-device 2> /dev/null)
}

set_nand_root_params()
{
	root_dev="ubi0:rootfs"
	root_dev_name="Internal Nand rootfs"
	root_dev_set=1
	root_fstype="ubifs"
	root_fsoptions="rw,bulk_read,no_chk_data_crc"
	root_fsmodules=""
	root_os_name="`osso-info OSSO_PRODUCT_RELEASE_NAME`"
	root_init="sbin/init"
	root_mounted=1
}

mount_device()
{
	echo_g "Mounting $1"
	root_dev="$1"

	[ -z "$root_dev" ] && return 1
	if [ ! -e /mnt/new_root ]; then
		mkdir -p /mnt/new_root
	fi

	if ! echo "$root_dev" | grep -q ":"; then
		root_dev="/dev/$root_dev"
	fi

	if [ ! -z "$root_fsmodules" ]; then
		load_modules "$root_fsmodules"
	fi

	if [ -z $root_fstype ]; then
		if [ -z $root_fsoptions ]; then
			time mount $root_dev /mnt/new_root
		else
			time mount -o $root_fsoptions $root_dev /mnt/new_root
		fi
	else
		if [ -z $root_fsoptions ]; then
			time mount -t $root_fstype $root_dev /mnt/new_root
		else
			time mount -t $root_fstype -o $root_fsoptions $root_dev /mnt/new_root
		fi
	fi
	grep -q new_root /proc/mounts
}

umount_device()
{
	grep -q "$1" /proc/mounts && umount /dev/$1
}

mount_new_root()
{
	if ! grep -q new_root /proc/mounts; then
		mount_device "$root_dev"
	fi
}

search_root_on()
{
# try to find first device with regex $1 which contains init
# it will be used as root
	[ -z "$1" ] && return 1

	parts=`awk '{print $4}' /proc/partitions | grep "$1"`
	[ -z "$parts" ] && return 1

	[ -z "$root_init" ] && root_init="sbin/init"

	for i in $parts; do
		if mount_device "$i"; then
			if [ -x "/mnt/new_root/$root_init" ]; then
				root_dev="$i"
				return 0;
			fi
			umount_device "$i"
		fi
	done
	return 1
}

search_root_on_mmcblk()
{
	load_mmc_modules
	if [ -z "$1" ]; then
		search_root_on "mmcblk[0-9][0-9]*p[0-9]"
	else
		search_root_on "mmcblk$1p[0-9]"
	fi
	return $?
}

search_root_on_mmc()
{
	search_root_on_mmcblk 0
	return $?
}

search_root_on_sd()
{
	search_root_on_mmcblk 1
	return $?
}

search_root_on_sda()
{
	search_root_on "sda"
	return $?
}

check_partitions()
{
	grep rootfs /proc/mtd >/dev/null
	if [ $? = 0 ] ; then
		mtd_found=1
	else
		mtd_found=0
	fi

	grep sda1 /proc/partitions >/dev/null
	if [ $? = 0 ] ; then
		sda_found=1
	else
		sda_found=0
	fi

	load_mmc_modules

	grep mmcblk0 /proc/partitions >/dev/null
	if [ $? = 0 ] ; then
		mmc_found=1
	else
		mmc_found=0
	fi

	grep mmcblk1 /proc/partitions >/dev/null
	if [ $? = 0 ] ; then
		sd_found=1
	else
		sd_found=0
	fi
}

start_pty_system()
{
	if [ -e /dev/ptmx ] ; then
		rm /dev/ptmx
	fi
	mknod /dev/ptmx c 5 2
	chmod 666 /dev/ptmx

	if [ ! -d /dev/pts ] ; then
		mkdir /dev/pts
	fi
	mount -t devpts devpts -o gid=5,mode=620 /dev/pts

	have_ptys=1
}

start_shell()
{
	# Make sure we have PTY system supported, so that we would support ssh
	# connections
	start_pty_system

	echo "Starting shell"

	# We use getty instead of just running /bin/sh because we want to have
	# job control working (e.g., we want Ctrl-C). With /bin/sh this does
	# not work, not sure why. Note, "-n -l /bin/sh" options make sure
	# that username/passeord are not asked for.
	/sbin/getty 115200 ttyS0 -n -l /bin/sh
}

show_roots()
{
	echo "Choose bootup option:"
	echo "  0) Skip this menu"
	if [ $mtd_found -eq 1 ]; then
		echo "  1) Internal Nand rootfs"
	fi
	if [ $mmc_found -eq 1 ]; then
		echo "  2) Internal eMMC"
	fi
	if [ $sd_found -eq 1 ]; then
		echo "  3) External SD Card"
	fi
	if [ $sda_found -eq 1 ]; then
		echo "  4) USB Mass Storage Device"
	fi
	echo "  9) Start a shell"
	echo ""
}

serial_bootmenu()
{
	want_menu=0
	if [ $serial_console -ne 0 ]; then
		echo_g "Press any key for interactive startup"
		key_pressed 1
		if [ $? -ne 0 ]; then
			want_menu=1
		fi
	fi

	if [ $want_menu -ne 1 ]; then return; fi

	root=0
	while [ true ]; do
		check_partitions
		show_roots
		root_dev_set=0
		read root
		case "$root" in
			0)
				return
				;;
			1)
				set_nand_root_params
				;;
			2-4)
				set_default_root_params
				if [ "$root" = "2" ]; then
					root_dev_name="Internal eMMC"
					search_root_on_mmc
				elif [ "$root" = "3" ]; then
					root_dev_name="External SD Card"
					search_root_on_sd
				elif [ "$root" = "4" ]; then
					root_dev_name="USB Mass Storage Device"
					search_root_on_sda
				fi
				if [ $? -ne 0 ]; then
					echo_g "Could not find suitable partition for root on $root_dev_name"
				else
					root_dev_set=1
					root_fstype=""
					root_fsoptions=""
				fi
				;;
			9)
				start_shell
				;;
			*)
				echo_g "Invalid selection"
				;;
		esac
		if [ $root_dev_set -eq 1 ]; then
			boot
			return
		fi
	done
}

framebuffer_bootmenu()
{
	if [ "`cat /sys/devices/platform/gpio-switch/slide/state`" = "open" ] && [ -f /bootmenu.sh ]; then
		. /bootmenu.sh
	fi
}

prepair_boot()
{
	if [ "$default_root" = "mmc" ] || [ "$default_root" = "sd" ]; then
		load_mmc_modules
	fi

	if [ "$root_dev_set" -ne 1 ]; then
		case "$default_root" in
		mmc|sd|usb)
			if [ "$default_root" = "mmc" ]; then
				root_dev_name="Internal eMMC"
				search_root_on_mmc
			elif [ "$default_root" = "sd" ]; then
				root_dev_name="External SD Card"
				search_root_on_sd
			elif [ "$default_root" = "usb" ]; then
				root_dev_name="USB Mass Storage Device"
				search_root_on_sda
			fi
			if [ $? -ne 0 ]; then
				echo_g "Init script not found on $root_dev_name, try nand boot"
				set_nand_root_params
			else
				root_dev_set=1
				root_fstype=""
				root_fsoptions=""
			fi
			;;
		nand|"")
			set_nand_root_params
			;;
		off)
			echo 0 > /sys/class/backlight/acx565akm/brightness
			text2screen -c -B black
			rm -f /etc/mtab
			fini_system
			/etc/init.d/minishutdown
			;;
		esac
	fi
}

show_rd_versions()
{
	bg_color=0xffff
	y=0
	x=0
	line_height=20

	text2screen -c -x 0 -y 0 -w 800 -h 160
	text2screen -t "Kernel version:" -s 2 -x $x -y $y -B $bg_color
	y=$(expr $y + $line_height)
	text2screen -t "  `uname -r` " -s 2 -x $x -y $y -B $bg_color
	y=$(expr $y + $line_height)
	text2screen -t "  `uname -v`" -s 2 -x $x -y $y -B $bg_color

	y=$(expr $y + $line_height + $line_height)
	text2screen -t " no initfs \o/" -s 2 -x $x -y $y -B $bg_color

	y=340
	text2screen -c -y 320 -x 0 -w 320 -h 120
	text2screen -t "Component versions:" -x $x -y $y -s 2 -B $bg_color
	y=$(expr $y + $line_height)
	while read line ; do
		text2screen -t "  $line" -x $x -y $y -s 2 -B $bg_color
		y=$(expr $y + $line_height)
	done < /proc/component_version
}

config_rd_mode()
{
	serial_console=0
	rd_mode=$(cal-tool --get-rd-mode 2> /dev/null)
	if [ "$rd_mode" = "enabled" ]; then
		rd_mode=1
		echo_g "R&D mode enabled"
		show_rd_versions
		if [ $(cal-tool -f | sed 's/,/\n/g' | grep serial-console) = "serial-console" ] ; then
			serial_console=1
		fi
	else
		rd_mode=0
	fi
}

prepare_core()
{
	release=`osso_info OSSO_PRODUCT_RELEASE_VERSION`
	echo "/media/mmc1/core-dumps/%e-%s-%p-$release.core" > /proc/sys/kernel/core_pattern
	ulimit -c unlimited
}

enter_state()
{
	echo active > /sys/devices/platform/gpio-switch/cmt_bsi/state
	STATE=`getbootstate`
	echo_g "Entering state '$STATE'."
	case $STATE in
		BOOT)
			def_runlevel=6
			;;
		USER|FLASH)
			def_runlevel=2
			;;
		ACT_DEAD)
			def_runlevel=5
			;;
		LOCAL|TEST)
			def_runlevel=3
			;;
		SHUTDOWN)
			def_runlevel=0
			;;
		*)
			if [ $rd_mode -ne 0 ]; then
				start_shell
				return
			fi
			echo_g "Houston, we have a problem, powering off..."
			text2screen -c -x 0 -y 0 -h 80 -w 800
			text2screen -t "Malfunction !" -x 0 -y 0 -s 4
			text2screen -t "Device shutdown in 10s" -x 0 -y 20 -s 4
			sleep 10
			poweroff
			def_runlevel=0
			;;
	esac
}

read_pmconfig()
{
	awk -f /sbin/read_cfg.awk /etc/pmconfig
}


load_early_modules

init_system

read_pmconfig

config_rd_mode

prepare_core

enter_state

set_default_root_params

serial_bootmenu

framebuffer_bootmenu

prepair_boot

boot
